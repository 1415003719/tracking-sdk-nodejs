/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
import { Request } from "../lib/request";
import { AftershipError, AfterShipErrorCodes } from "../error";
import { MarkTrackingCompletedBySlugTrackingNumberRequest } from "../model/MarkTrackingCompletedBySlugTrackingNumberRequest";
import { MarkTrackingCompletedBySlugTrackingNumberQuery } from "../model/MarkTrackingCompletedBySlugTrackingNumberQuery";
import { MarkTrackingCompletedBySlugTrackingNumberResponse } from "../model/MarkTrackingCompletedBySlugTrackingNumberResponse";
import { GetTrackingsQuery } from "../model/GetTrackingsQuery";
import { GetTrackingsResponse } from "../model/GetTrackingsResponse";
import { DeleteTrackingByIdResponse } from "../model/DeleteTrackingByIdResponse";
import { MarkTrackingCompletedByIdRequest } from "../model/MarkTrackingCompletedByIdRequest";
import { MarkTrackingCompletedByIdResponse } from "../model/MarkTrackingCompletedByIdResponse";
import { GetTrackingBySlugTrackingNumberQuery } from "../model/GetTrackingBySlugTrackingNumberQuery";
import { GetTrackingBySlugTrackingNumberResponse } from "../model/GetTrackingBySlugTrackingNumberResponse";
import { UpdateTrackingBySlugTrackingNumberRequest } from "../model/UpdateTrackingBySlugTrackingNumberRequest";
import { UpdateTrackingBySlugTrackingNumberQuery } from "../model/UpdateTrackingBySlugTrackingNumberQuery";
import { UpdateTrackingBySlugTrackingNumberResponse } from "../model/UpdateTrackingBySlugTrackingNumberResponse";
import { GetTrackingByIdQuery } from "../model/GetTrackingByIdQuery";
import { GetTrackingByIdResponse } from "../model/GetTrackingByIdResponse";
import { RetrackTrackingBySlugTrackingNumberQuery } from "../model/RetrackTrackingBySlugTrackingNumberQuery";
import { RetrackTrackingBySlugTrackingNumberResponse } from "../model/RetrackTrackingBySlugTrackingNumberResponse";
import { CreateTrackingRequest } from "../model/CreateTrackingRequest";
import { CreateTrackingResponse } from "../model/CreateTrackingResponse";
import { RetrackTrackingByIdResponse } from "../model/RetrackTrackingByIdResponse";
import { DeleteTrackingBySlugTrackingNumberQuery } from "../model/DeleteTrackingBySlugTrackingNumberQuery";
import { DeleteTrackingBySlugTrackingNumberResponse } from "../model/DeleteTrackingBySlugTrackingNumberResponse";
import { UpdateTrackingByIdRequest } from "../model/UpdateTrackingByIdRequest";
import { UpdateTrackingByIdResponse } from "../model/UpdateTrackingByIdResponse";

export class TrackingApi {
    private readonly request: Request;

    constructor(request: Request) {
        this.request = request;
    }

    /**
     * Mark a tracking as completed. The tracking won&#39;t auto update until retrack it.&lt;b style=&#34;color:#FF0000&#34;&gt;(This endpoint will be deprecated in version 2024-10)&lt;/b&gt;
     */
    public async markTrackingCompletedBySlugTrackingNumber(slug: string, tracking_number: string, body: MarkTrackingCompletedBySlugTrackingNumberRequest,query?: MarkTrackingCompletedBySlugTrackingNumberQuery, headers?: {[key: string]: any}): Promise<MarkTrackingCompletedBySlugTrackingNumberResponse> {
        if (!slug) {
            throw new AftershipError(
                "Invalid params: slug",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        if (!tracking_number) {
            throw new AftershipError(
                "Invalid params: tracking_number",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<MarkTrackingCompletedBySlugTrackingNumberResponse>({url: `/tracking/2024-07/trackings/${slug}/${tracking_number}/mark-as-completed`, method: "POST", body, query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Get tracking results of multiple trackings.&lt;div style=&#34;visibility:hidden; height: 0&#34;&gt;&lt;/div&gt;
     */
    public async getTrackings(query?: GetTrackingsQuery, headers?: {[key: string]: any}): Promise<GetTrackingsResponse> {
        
        return this.request.makeRequest<GetTrackingsResponse>({url: `/tracking/2024-07/trackings`, method: "GET", query, headers, request_legacy_tag: "", response_legacy_tag: "trackings", is_paging: true})
    }
    /**
     * Delete a tracking.
     */
    public async deleteTrackingById(id: string,  headers?: {[key: string]: any}): Promise<DeleteTrackingByIdResponse> {
        if (!id) {
            throw new AftershipError(
                "Invalid params: id",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<DeleteTrackingByIdResponse>({url: `/tracking/2024-07/trackings/${id}`, method: "DELETE", headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Mark a tracking as completed. The tracking won&#39;t auto update until retrack it.
     */
    public async markTrackingCompletedById(id: string, body: MarkTrackingCompletedByIdRequest, headers?: {[key: string]: any}): Promise<MarkTrackingCompletedByIdResponse> {
        if (!id) {
            throw new AftershipError(
                "Invalid params: id",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<MarkTrackingCompletedByIdResponse>({url: `/tracking/2024-07/trackings/${id}/mark-as-completed`, method: "POST", body, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Get tracking results of a single tracking.&lt;b style=&#34;color:#FF0000&#34;&gt;(This endpoint will be deprecated in version 2024-10)&lt;/b&gt;
     */
    public async getTrackingBySlugTrackingNumber(slug: string, tracking_number: string, query?: GetTrackingBySlugTrackingNumberQuery, headers?: {[key: string]: any}): Promise<GetTrackingBySlugTrackingNumberResponse> {
        if (!slug) {
            throw new AftershipError(
                "Invalid params: slug",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        if (!tracking_number) {
            throw new AftershipError(
                "Invalid params: tracking_number",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<GetTrackingBySlugTrackingNumberResponse>({url: `/tracking/2024-07/trackings/${slug}/${tracking_number}`, method: "GET", query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Update a tracking.&lt;b style=&#34;color:#FF0000&#34;&gt;(This endpoint will be deprecated in version 2024-10)&lt;/b&gt;
     */
    public async updateTrackingBySlugTrackingNumber(slug: string, tracking_number: string, body: UpdateTrackingBySlugTrackingNumberRequest,query?: UpdateTrackingBySlugTrackingNumberQuery, headers?: {[key: string]: any}): Promise<UpdateTrackingBySlugTrackingNumberResponse> {
        if (!slug) {
            throw new AftershipError(
                "Invalid params: slug",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        if (!tracking_number) {
            throw new AftershipError(
                "Invalid params: tracking_number",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<UpdateTrackingBySlugTrackingNumberResponse>({url: `/tracking/2024-07/trackings/${slug}/${tracking_number}`, method: "PUT", body, query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Get tracking results of a single tracking.
     */
    public async getTrackingById(id: string, query?: GetTrackingByIdQuery, headers?: {[key: string]: any}): Promise<GetTrackingByIdResponse> {
        if (!id) {
            throw new AftershipError(
                "Invalid params: id",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<GetTrackingByIdResponse>({url: `/tracking/2024-07/trackings/${id}`, method: "GET", query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Retrack an expired tracking. Max 3 times per tracking.&lt;b style=&#34;color:#FF0000&#34;&gt;(This endpoint will be deprecated in version 2024-10)&lt;/b&gt;
     */
    public async retrackTrackingBySlugTrackingNumber(slug: string, tracking_number: string, query?: RetrackTrackingBySlugTrackingNumberQuery, headers?: {[key: string]: any}): Promise<RetrackTrackingBySlugTrackingNumberResponse> {
        if (!slug) {
            throw new AftershipError(
                "Invalid params: slug",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        if (!tracking_number) {
            throw new AftershipError(
                "Invalid params: tracking_number",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<RetrackTrackingBySlugTrackingNumberResponse>({url: `/tracking/2024-07/trackings/${slug}/${tracking_number}/retrack`, method: "POST", query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Create a tracking.&lt;div style=&#34;visibility:hidden; height: 0&#34;&gt;&lt;/div&gt;
     */
    public async createTracking(body: CreateTrackingRequest, headers?: {[key: string]: any}): Promise<CreateTrackingResponse> {
        
        return this.request.makeRequest<CreateTrackingResponse>({url: `/tracking/2024-07/trackings`, method: "POST", body, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Retrack an expired tracking. Max 3 times per tracking.
     */
    public async retrackTrackingById(id: string,  headers?: {[key: string]: any}): Promise<RetrackTrackingByIdResponse> {
        if (!id) {
            throw new AftershipError(
                "Invalid params: id",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<RetrackTrackingByIdResponse>({url: `/tracking/2024-07/trackings/${id}/retrack`, method: "POST", headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Delete a tracking.&lt;b style=&#34;color:#FF0000&#34;&gt;(This endpoint will be deprecated in version 2024-10)&lt;/b&gt;
     */
    public async deleteTrackingBySlugTrackingNumber(slug: string, tracking_number: string, query?: DeleteTrackingBySlugTrackingNumberQuery, headers?: {[key: string]: any}): Promise<DeleteTrackingBySlugTrackingNumberResponse> {
        if (!slug) {
            throw new AftershipError(
                "Invalid params: slug",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        if (!tracking_number) {
            throw new AftershipError(
                "Invalid params: tracking_number",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<DeleteTrackingBySlugTrackingNumberResponse>({url: `/tracking/2024-07/trackings/${slug}/${tracking_number}`, method: "DELETE", query, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
    /**
     * Update a tracking.
     */
    public async updateTrackingById(id: string, body: UpdateTrackingByIdRequest, headers?: {[key: string]: any}): Promise<UpdateTrackingByIdResponse> {
        if (!id) {
            throw new AftershipError(
                "Invalid params: id",
                AfterShipErrorCodes.VALUE_INVALID
            );
        }
        
        return this.request.makeRequest<UpdateTrackingByIdResponse>({url: `/tracking/2024-07/trackings/${id}`, method: "PUT", body, headers, request_legacy_tag: "", response_legacy_tag: "", is_paging: false})
    }
}